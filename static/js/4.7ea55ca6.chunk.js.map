{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","styles","item","avatarItem","src","alt","message","like","SignupSchema","Yup","shape","textPost","max","required","MyPostForm","formik","useFormik","initialValues","validationSchema","onSubmit","values","addPost","hasError","touched","errors","e","handleSubmit","getFieldProps","type","MyPosts","React","memo","postsElements","posts","map","post","likesCount","id","postsBlock","MyPostsContainer","connect","state","profilePage","dispatch","text","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","content","descriptionBlock","avatar","photos","large","description","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.7ea55ca6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3nsRY\",\"posts\":\"MyPosts_posts__36phs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__32K6z\",\"avatarItem\":\"Post_avatarItem__MhnT5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__dl1lZ\"};","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <div className={styles.avatarItem}>\r\n                <img src=\"https://uxwing.com/wp-content/themes/uxwing/download/12-people-gesture/avatar.png\" alt=\"\"/>\r\n            </div>\r\n            {props.message}\r\n            <div>\r\n                <div>{props.like}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\n\r\ntype PropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    textPost: Yup.string()\r\n        .max(30, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nconst MyPostForm = (props: PropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textPost: ''\r\n        },\r\n        validationSchema: SignupSchema,\r\n        onSubmit: values => {\r\n            props.addPost(values.textPost)\r\n        }\r\n    });\r\n\r\n    const hasError = formik.touched.textPost && formik.errors.textPost;\r\n\r\n    return (\r\n        <form onSubmit={(e) => {\r\n            formik.handleSubmit(e);\r\n            // formik.resetForm();\r\n        }}>\r\n    \r\n            <div>\r\n                <textarea\r\n                    {...formik.getFieldProps(\"textPost\")}\r\n                    // value={props.postMessage}\r\n                    // onChange={onPostChangeHandler}\r\n                    // name=\"textPost\"\r\n                    // id=\"textPost\"\r\n                >\r\n                </textarea>\r\n                { hasError ? <div className={\"error-message\"}>{formik.errors.textPost}</div> : null}\r\n            </div>\r\n            <button type=\"submit\">Add post</button>\r\n            <button type=\"button\">Remove</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport const MyPosts:React.FC<MyPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(post => <Post key={post.id} message={post.message} like={post.likesCount}/>);\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h2>My Posts</h2>\r\n            <MyPostForm addPost={props.addPost} />\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React from \"react\";\r\nimport {addPost, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {StoreType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nlet mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPost(text));\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<PropsType> = (props) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    // componentDidUpdate(prevProps: PropsType, prevState: PropsType, snapshot?: any) {\r\n    //     if (prevProps.status !== status) {\r\n    //     setStatus(status);\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {status || '----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({\r\n                                profile,\r\n                                status,\r\n                                updateStatus,\r\n                                ...props\r\n                            }: PropsType) => {\r\n    if(!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.descriptionBlock}>\r\n                <div className={styles.avatar}>\r\n                    <img src={profile.photos.large} alt=\"\"/>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <div className={styles.description}>Description</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {getUserProfile, getUserStatus, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype userProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n//this.props.match.params type\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & userProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StoreType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        \r\n        if(!userId) {\r\n            if (this.props.authorizedUserId) {\r\n                userId = this.props.authorizedUserId;\r\n            } else {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StoreType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus}),\r\n    withRouter,\r\n)(ProfileContainer);"],"sourceRoot":""}