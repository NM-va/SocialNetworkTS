{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessages/AddMessages.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","DialogItem","props","path","id","className","styles","dialog","active","to","userItem","avatar","src","alt","name","Message","messagesItem","message","SignupSchema","Yup","shape","newMessageBody","max","required","AddMessages","formik","useFormik","initialValues","validationSchema","onSubmit","values","addMessageCallback","hasError","touched","errors","createMessage","e","handleSubmit","getFieldProps","textField","btn","type","mapStateToPropsForRedirect","state","isAuth","auth","DialogsContainer","compose","connect","dialogsPage","dispatch","addMessage","text","addMessageAC","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItem"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,8BAA8B,cAAgB,+BAA+B,UAAY,2BAA2B,IAAM,uB,iFCQ7TC,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAS,UAAKC,IAAOC,OAAZ,YAAsBD,IAAOE,QAA3C,SACI,eAAC,IAAD,CAASC,GAAIN,EAAME,UAAWC,IAAOI,SAArC,UACI,qBAAKL,UAAWC,IAAOK,OAAQC,IAAI,wFAAwFC,IAAI,KAC9HX,EAAMY,WCRVC,EAAU,SAACb,GACpB,OACI,qBAAKG,UAAWC,IAAOU,aAAvB,SAAsCd,EAAMe,W,wBCD9CC,EAAeC,MAAaC,MAAM,CACpCC,eAAgBF,MACXG,IAAI,GAAI,aACRC,SAAS,cAGLC,EAAc,SAACtB,GAExB,IAAMuB,EAASC,YAAU,CACrBC,cAAe,CACXN,eAAgB,IAEpBO,iBAAkBV,EAClBW,SAAU,SAAAC,GACN5B,EAAM6B,mBAAmBD,EAAOT,mBAIlCW,EAAWP,EAAOQ,QAAQZ,gBAAkBI,EAAOS,OAAOb,eAEhE,OACI,uBAAMhB,UAAWC,IAAO6B,cAClBN,SAAU,SAACO,GACPX,EAAOY,aAAaD,IAF9B,UAMI,gCACI,oDACQX,EAAOa,cAAc,mBAD7B,IAEIjC,UAAWC,IAAOiC,aACpBP,EAAW,qBAAK3B,UAAW,gBAAhB,SAAkCoB,EAAOS,OAAOb,iBAAwB,QAEzF,8BACI,wBAAQhB,UAAWC,IAAOkC,IAAKC,KAAK,SAApC,wB,uCClCVC,EAA6B,SAACC,GAChC,MAAO,CAACC,OAAQD,EAAME,KAAKD,SCS/B,IAeME,EAAmBC,YACrBC,aAhBkB,SAACL,GACnB,MAAO,CACHM,YAAaN,EAAMM,gBAIF,SAACC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASG,YAAaD,UDf3B,SAA6BE,GAYhC,OAFqCN,YAAQN,EAARM,EARX,SAAC9C,GAA8B,IAChD0C,EAAwB1C,EAAxB0C,OAAWW,EADoC,YACvBrD,EADuB,YAGpD,OAAK0C,EACE,cAACU,EAAD,eAAeC,IADF,cAAC,IAAD,CAAU9C,GAAI,gBCgBjBsC,EC3BF,SAAC7C,GAEpB,IAAIsD,EAAkBtD,EAAM+C,YAAYQ,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB7C,KAAM6C,EAAE7C,KAAMV,GAAIuD,EAAEvD,IAA1BuD,EAAEvD,OAExEwD,EAAmB1D,EAAM+C,YAAYY,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoB7C,QAAS6C,EAAE7C,SAAjB6C,EAAE1D,OAE3E,OACI,sBAAKC,UAAWC,IAAOmD,QAAvB,UACI,qBAAKpD,UAAWC,IAAOyD,YAAvB,SACKP,IAEL,gCACI,qBAAKnD,UAAWC,IAAOuD,SAAvB,SACKD,IAEL,gDACA,cAAC,EAAD,CAAa7B,mBAAoB7B,EAAMiD,sBDgBxCL","file":"static/js/5.fe81b49b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3RIKZ\",\"active\":\"Dialogs_active__OXHk5\",\"userItem\":\"Dialogs_userItem__yE71c\",\"avatar\":\"Dialogs_avatar__11iXS\",\"messages\":\"Dialogs_messages__2g3JD\",\"messagesItem\":\"Dialogs_messagesItem__1_1m_\",\"createMessage\":\"Dialogs_createMessage__3-ffD\",\"textField\":\"Dialogs_textField__3kEWu\",\"btn\":\"Dialogs_btn__3RnuG\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from '../Dialogs.module.css';\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={`${styles.dialog} ${styles.active}`}>\r\n            <NavLink to={path} className={styles.userItem}>\r\n                <img className={styles.avatar} src=\"https://wonder-day.com/wp-content/uploads/2020/03/wonder-day-otkrytki-prikhodi-55.jpg\" alt=\"\"/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={styles.messagesItem}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport styles from \"../Dialogs.module.css\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype PropsType = {\r\n    addMessageCallback: (textMessage: string) => void\r\n}\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n    newMessageBody: Yup.string()\r\n        .max(30, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nexport const AddMessages = (props: PropsType) => {\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: \"\"\r\n        },\r\n        validationSchema: SignupSchema,\r\n        onSubmit: values => {\r\n            props.addMessageCallback(values.newMessageBody);\r\n        }\r\n    })\r\n\r\n    const hasError = formik.touched.newMessageBody && formik.errors.newMessageBody;\r\n    \r\n    return (\r\n        <form className={styles.createMessage}\r\n              onSubmit={(e) => {\r\n                  formik.handleSubmit(e);\r\n                  // formik.resetForm();\r\n              }}>\r\n            \r\n            <div>\r\n                <textarea\r\n                    {...formik.getFieldProps(\"newMessageBody\")}\r\n                    className={styles.textField}></textarea>\r\n                { hasError ? <div className={\"error-message\"}>{formik.errors.newMessageBody}</div> : null}\r\n            </div>\r\n            <div>\r\n                <button className={styles.btn} type=\"submit\">Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, { ComponentType } from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: StoreType): MapStatePropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    \r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        \r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    };\r\n    \r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    \r\n    return ConnectedAuthRedirectComponent;\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {addMessageAC, InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (text: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nlet mapStateToProps = (state: StoreType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (text: string) => {\r\n            dispatch(addMessageAC(text));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {AddMessages} from \"./AddMessages/AddMessages\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    \r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    \r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n    \r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div>\r\n                <div className={styles.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div>Enter message</div>\r\n                <AddMessages addMessageCallback={props.addMessage}/>\r\n            </div>\r\n        \r\n        </div>\r\n    )\r\n};"],"sourceRoot":""}